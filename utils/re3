// utils/redis.js

import redis from 'redis';

class RedisClient {
  constructor() {
    this.client = redis.createClient();
    this.isClientConnected = true;

    this.client.on('error', (error) => {
      console.error('Redis error:', error);
      this.isClientConnected = false;
    });

    this.client.on('connect', () => {
      this.isClientConnected = true;
    });
  }

  isAlive() {
    return this.isClientConnected;
  }

  async get(key) {
    return new Promise((resolve, reject) => {
      this.client.get(key, (error, value) => {
        if (error) {
          reject(error);
        } else {
          resolve(value);
        }
      });
    });
  }

  async set(key, value, duration) {
    return new Promise((resolve, reject) => {
      // Convert duration to an integer if it's not already
      const expirationTime = parseInt(duration, 10);

      // Check if the expiration time is a valid integer
      if (isNaN(expirationTime) || expirationTime <= 0) {
        reject(new Error('Expiration time should be a valid positive integer representing seconds'));
        return;
      }

      // Set value with expiration time
      this.client.set(key, value, 'EX', expirationTime, (error, response) => {
        if (error) {
          reject(error);
        } else {
          resolve(response);
        }
      });
    });
  }

  async del(key) {
    return new Promise((resolve, reject) => {
      this.client.del(key, (error, response) => {
        if (error) {
          reject(error);
        } else {
          resolve(response);
        }
      });
    });
  }
}

export const redisClient = new RedisClient();
export default redisClient;
