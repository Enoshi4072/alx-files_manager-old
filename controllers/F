// controllers/FilesController.js
const fs = require('fs');
const path = require('path');
const uuid = require('uuid');
const { validationResult } = require('express-validator');

// Assuming you have a function to retrieve the user based on the token
const { getUserByToken } = require('../services/AuthService');

// Assuming you have a File model or a DB connection
const File = require('../models/File');

exports.postUpload = async (req, res) => {
    try {
        // Check for validation errors
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }

        // Retrieve the user based on the token
        const user = await getUserByToken(req.headers['x-token']);
        if (!user) {
            return res.status(401).json({ error: 'Unauthorized' });
        }

        const { name, type, parentId = 0, isPublic = false, data } = req.body;

        // Validate input fields
        if (!name) {
            return res.status(400).json({ error: 'Missing name' });
        }

        if (!type || !['folder', 'file', 'image'].includes(type)) {
            return res.status(400).json({ error: 'Missing type' });
        }

        if (type !== 'folder' && !data) {
            return res.status(400).json({ error: 'Missing data' });
        }

        // If parentId is set, validate it
        if (parentId !== 0) {
            const parentFile = await File.findById(parentId);
            if (!parentFile) {
                return res.status(400).json({ error: 'Parent not found' });
            }
            if (parentFile.type !== 'folder') {
                return res.status(400).json({ error: 'Parent is not a folder' });
            }
        }

        // Create a new file object
        const newFile = new File({
            userId: user._id,
            name,
            type,
            parentId,
            isPublic,
        });

        // If type is file or image, save the file locally
        if (type === 'file' || type === 'image') {
            const folderPath = process.env.FOLDER_PATH || '/tmp/files_manager';
            const filename = uuid.v4();
            const filePath = path.join(folderPath, filename);
            const fileData = Buffer.from(data, 'base64');

            // Save the file locally
            fs.writeFileSync(filePath, fileData);

            // Set localPath for the file
            newFile.localPath = filePath;
        }

        // Save the file object to the database
        await newFile.save();

        return res.status(201).json(newFile);
    } catch (error) {
        console.error(error);
        return res.status(500).json({ error: 'Internal Server Error' });
    }
};
