// controllers/FilesController.js
import { ObjectId } from 'mongodb';
import dbClient from '../utils/db';

export default class FilesController {
  static async postUpload(req, res) {
    const { name, type, data, parentId = '0', isPublic = false } = req.body;
    const userId = req.user?.userId;

    if (!name) {
      return res.status(400).json({ error: 'Missing name' });
    }

    if (!type || !['folder', 'file', 'image'].includes(type)) {
      return res.status(400).json({ error: 'Missing type or invalid type' });
    }

    if ((type !== 'folder') && !data) {
      return res.status(400).json({ error: 'Missing data' });
    }

    try {
      // Check if parentId is valid and if the parent is a folder
      if (parentId !== '0') {
        const parentFile = await dbClient.db.collection('files').findOne({ _id: ObjectId(parentId) });
        if (!parentFile) {
          return res.status(400).json({ error: 'Parent not found' });
        }
        if (parentFile.type !== 'folder') {
          return res.status(400).json({ error: 'Parent is not a folder' });
        }
      }

      // Save the file in the database
      let newFile = {
        userId,
        name,
        type,
        isPublic,
        parentId,
      };

      if (type !== 'folder') {
        // Save the file in disk
        const folderPath = process.env.FOLDER_PATH || '/tmp/files_manager';

        // Check if the directory exists, if not, create it
        if (!fs.existsSync(folderPath)) {
          fs.mkdirSync(folderPath, { recursive: true });
        }

        const filePath = path.join(folderPath, `${uuidv4()}`);
        fs.writeFileSync(filePath, Buffer.from(data, 'base64'));
        newFile.localPath = filePath;
      }

      const result = await dbClient.db.collection('files').insertOne(newFile);
      newFile = { ...newFile, id: result.insertedId.toString() };

      return res.status(201).json(newFile);
    } catch (error) {
      console.error('Error creating file:', error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  }

  static async getShow(req, res) {
    const { id } = req.params;
    const userId = req.user?.userId;

    try {
      const file = await dbClient.db.collection('files').findOne({ _id: ObjectId(id), userId });

      if (!file) {
        return res.status(404).json({ error: 'Not found' });
      }

      return res.json(file);
    } catch (error) {
      console.error('Error retrieving file:', error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  }

  static async getIndex(req, res) {
    const { parentId = '0', page = 0 } = req.query;
    const userId = req.user?.userId;

    try {
      const files = await dbClient.db.collection('files')
        .find({ parentId, userId })
        .skip(parseInt(page) * 20)
        .limit(20)
        .toArray();

      return res.json(files);
    } catch (error) {
      console.error('Error retrieving files:', error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  }
}
